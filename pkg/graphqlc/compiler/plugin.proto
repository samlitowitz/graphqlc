syntax = "proto3";

package graphqlc.compiler;

option go_package = "compiler";

import "graphqlc/descriptor.proto";

// The version number of protocol compiler
message Version {
    int32 major = 1;
    int32 minor = 2;
    int32 patch = 3;
    // A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
    // be empty for mainline stable releases.
    string suffix = 4;
}

// An encoded CodeGeneratorRequest is written to the plugins stdin.
message CodeGeneratorRequest {
    // The .graphql files that were explicitly listed on the command-line.
    // The code generator should generate code only for these files.
    // Each files descriptor will be included in graphql_file, defined below.
    repeated string file_to_generate = 1;
    string parameter = 2;

    // FileDescriptorGraphql for all files in files_to_generate.
    repeated FileDescriptorGraphql graphql_file = 15;

    // The version number of graphql compiler
    Version compiler_version = 3;
}

// The plugin writes an encoded CodeGeneratorResponse to stdout.
message CodeGeneratorResponse {
    // Error message. If non-empty, code generation failed. The plugin
    // process should exist with status code zero even if it reports an
    // error in this way.
    //
    // This should be used to indicate errors in .graphql files which
    // prevent the code generator from generating correct code. Errors
    // which indicate a problem in graphqlc itself -- such as the input
    // CodeGeneratorRequest being unparseable -- should be reported by
    // writing a message to stderr and exiting with a non-zero status code.
    string error = 1;

    // Represents a single generated file.
    message File {
        // The file name relative to the output directory. The name must
        // not contain "." or ".." components and must be relative. The
        // file cannot lie outside the output directory. "/" must used as
        // a path separtor, not "\".
        //
        // If the name is ommited the content will be appended to the
        // previous file. This allows the generator to break large files
        // into small chunks, and allows the generated text to be streamed
        // back to graphqlc so that large files need not reside completely
        // in memory at one time.
        string name = 1;

        // If non-empty, indicates that the named file should already exist,
        // and the content here is to be inserted into that file at a
        // defined insertion point. This feature allows a code generator to
        // extend the output produced by another code generator. The original
        // generator may provide insertion points by placing special
        // annotations in the file that look like:
        //  @@graphqlc_insertion_point(NAME)
        // The annotation can have arbitrary text before and after it on
        // the line which allows it to be placed in a comment. NAME should
        // be replaced with an identifier naming the point -- that is what
        // other generators will use as the insertion_point. Code inserted
        // at this point will be placed immediately above the line
        // containing the insertion point. This allows multiple insertions
        // to the same point to be added in order. The double-@ is intended
        // to make it unlikely that the generated code could contain things
        // that look like insertion points by accident.
        //
        // Note that if the line containing the insertion point begins with
        // whitespace the same whitespace will be added to every line of the
        // inserted text. This is useful for langauges like Python where
        // indentation matters. In these languages the insertion point
        // comment should be indented the same amount as any inserted code
        // will need to be in order to work correctly in that context.
        //
        // The code generator that generates the initial file and the one
        // which inserts into it must both run as part of a single invocation
        // of graphqlc. Code generators are executed in the order in which
        // they appear on the command line.
        //
        // If |insertion_point| is present |name| must also be present.
        string insertion_point = 2;

        // The file contents.
        string content = 15;
    }
    repeated File file = 15;
}