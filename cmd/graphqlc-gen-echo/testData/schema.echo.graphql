schema {
  query: Query
  mutation: Mutation
}

scalar Time

type Query {
  hero(episode: Episode = NEWHOPE): Character
  reviews(episode: Episode!, since: Time): [Review!]!
  search(text: String!): [SearchResult!]!
  character(id: ID!): Character
  droid(id: ID!): Droid
  human(id: ID!): Human
  starship(id: ID!): Starship
}

type Mutation {
  createReview(episode: Episode!, review: ReviewInput!): Review
}

type Human implements Character {
  id: ID!
  name: String!
  height(unit: LengthUnit = METER): Float!
  mass: Float
  friends: [Character!]
  friendsConnection(first: Int, after: ID): FriendsConnection!
  appearsIn: [Episode!]!
  starships: [Starship!]
}

type Droid implements Character {
  id: ID!
  name: String!
  friends: [Character!]
  friendsConnection(first: Int, after: ID): FriendsConnection!
  appearsIn: [Episode!]!
  primaryFunction: String
}

type FriendsConnection {
  totalCount: Int!
  edges: [FriendsEdge!]
  friends: [Character!]
  pageInfo: PageInfo!
}

type FriendsEdge {
  cursor: ID!
  node: Character
}

type PageInfo {
  startCursor: ID!
  endCursor: ID!
  hasNextPage: Boolean!
}

type Review {
  stars: Int!
  commentary: String
  time: Time
}

type Starship {
  id: ID!
  name: String!
  length(unit: LengthUnit = METER): Float!
  history: [[Int!]!]!
}

interface Character {
  id: ID!
  name: String!
  friends: [Character!]
  friendsConnection(first: Int, after: ID): FriendsConnection!
  appearsIn: [Episode!]!
}

union SearchResult = Human | Droid | Starship

enum Episode {
  NEWHOPE
  EMPIRE
  JEDI
}

enum LengthUnit {
  METER
  FOOT
}

input ReviewInput {
  stars: Int!
  commentary: String
  time: Time
}
